import pytest

@pytest.mark.asyncio
async def test_create_product_success(client):
    response = await client.post("/products/", json={
        "name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç",
        "price": 150.0,
        "quantity": 5
    })
    assert response.status_code == 200
    data = response.json()
    assert data["name"] == "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç"
    assert data["price"] == 150.0
    assert data["quantity"] == 5

@pytest.mark.asyncio
async def test_add_product_success(client):
    # –°–æ–∑–¥–∞—ë–º —Ç–æ–≤–∞—Ä
    response1 = await client.post("/products/", json={
        "name": "–û–±—ä–µ–¥–∏–Ω—è–µ–º—ã–π –ø—Ä–æ–¥—É–∫—Ç",
        "price": 150.0,
        "quantity": 5
    })
    assert response1.status_code == 200
    data1 = response1.json()
    product_id = data1["id"]
    assert data1["quantity"] == 5

    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    response2 = await client.post("/products/", json={
        "name": "–û–±—ä–µ–¥–∏–Ω—è–µ–º—ã–π –ø—Ä–æ–¥—É–∫—Ç",
        "price": 150.0,
        "quantity": 5
    })
    assert response2.status_code == 200
    data2 = response2.json()

    assert data2["quantity"] == 10
    assert data2["id"] == product_id

# ------------------
# üí• –í–∞–ª–∏–¥–Ω—ã–µ –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
# ------------------

@pytest.mark.asyncio
async def test_product_with_comma_in_price(client):
    response = await client.post("/products/", json={
        "name": "–ó–∞–ø—è—Ç–∞—è",
        "price": "150,5",  # ‚Üê –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        "quantity": 1
    })
    assert response.status_code == 422

@pytest.mark.asyncio
async def test_product_with_zero_quantity(client):
    response = await client.post("/products/", json={
        "name": "–° –Ω—É–ª–µ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º",
        "price": 100.0,
        "quantity": 0
    })
    # –¢—É—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏: –¥–æ–ø—É—Å—Ç–∏–º –ª–∏ 0?
    # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 422
    assert  response.status_code == 200

@pytest.mark.asyncio
async def test_product_with_empty_name(client):
    response = await client.post("/products/", json={
        "name": "",
        "price": 100.0,
        "quantity": 5
    })
    assert response.status_code == 422

@pytest.mark.asyncio
async def test_product_with_negative_price(client):
    response = await client.post("/products/", json={
        "name": "–ú–∏–Ω—É—Å —Ü–µ–Ω–∞",
        "price": -10.0,
        "quantity": 5
    })
    assert response.status_code == 422

@pytest.mark.asyncio
async def test_product_with_negative_quantity(client):
    response = await client.post("/products/", json={
        "name": "–ú–∏–Ω—É—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        "price": 100.0,
        "quantity": -1
    })
    assert response.status_code == 422

@pytest.mark.asyncio
async def test_product_with_non_number_price(client):
    response = await client.post("/products/", json={
        "name": "–ù–µ —á–∏—Å–ª–æ",
        "price": "abc",
        "quantity": 1
    })
    assert response.status_code == 422
